"""
Wavelet Transform

This script performs dimensionality reduction on temperature measurements
through a Discrete Wavelet Transform (DWT) wave decomposition. Measurements
will be split into frequency sub-bands, from which feature statistics will be
generated.

**** AgAdapt Project ****
"""


import os
import time
import argparse
import pywt
import pandas as pd
import numpy as np
from math import ceil
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from itertools import cycle
from threading import Thread
from colorama import Fore, Style


status = False
current = 0
total = 1


def tick_msg(text):
    """
    Prints a message after a green '✔'.

    Parameters
    ----------
    text : str
        Message to be printed.
    """
    print(Fore.GREEN + "[ ✔ ]" + Style.RESET_ALL + " " + text)


def info_msg(text):
    """
    Prints a message after a blue 'i'.

    Parameters
    ----------
    text : str
        Message to be printed.
    """
    print(Fore.CYAN + "[ i ]" + Style.RESET_ALL + " " + text)


def anim_loading(text):
    """
    Displays a loading animation.

    The animation will be displayed until the global variable "status" is set
    to false.

    Parameters
    ----------
    text : str
        Message to be printed along with the animation.
    """
    frames = ["●○○", "○●○", "○○●", "○●○"]

    for i in cycle(frames):
        if status:
            print(Fore.MAGENTA + "[" + i + "] " + Style.RESET_ALL + text,
                  end = "\r", flush = True)
            time.sleep(0.4)
        else:
            break


def anim_process(text):
    """
    Displays a loading animation and the current process being performed.

    The current process is given by the global variable "current". The total
    number of processes are given by the global variable "total". The animation
    will be displayed until the global variable "status" is set to false.

    Parameters
    ----------
    text : str
        Message to be printed along with the animation.
    """
    frames = ["●○○", "○●○", "○○●", "○●○"]

    for frame in cycle(frames):

        if status:
            print(Fore.MAGENTA + "[" + frame + "]" + Style.RESET_ALL + " "
                  + str(current) + "/" + str(total) + " "
                  + "(" + format((current / total) * 100, ".2f") + "%)"
                  + " | " + text, end = "\r", flush = True)

            time.sleep(0.4)

        else:
            print(Fore.MAGENTA + "[●●●]" + Style.RESET_ALL + " "
                  + str(total) + "/" + str(total) + " "
                  + "(" + format(100, ".2f") + "%)"
                  + " | " + text, end = "\n", flush = True)

            break


def wavelet_transform(field_df, wavelet_type, levels):
    """
    Performs a Discrete Wavelet Transform (DWT) wave decomposition of given
    temperature data.

    Missing data for any measurement will be dropped.

    Parameters
    ----------
    field_df : pd.DataFrame
        DataFrame containing temperature data of a target field.
    wavelet_type : str
        Type of wavelet to be used for the DWT.
    levels : int
        The number of wavelet coefficients to be generated by the DWT. If this
        parameter is "None", the maximum number possible will be used.

    Returns
    -------
    air_wavelet : np.ndarray
        Array containing air temperature wavelet coefficients.
    soil_wavelet : np.ndarray
        Array containing soil temperature wavelet coefficients.
    air_features : np.ndarray
        Array containing air temperature features.
    soil_features : np.ndarray
        Array containing soil temperature features.
    metadata : np.ndarray
        Array containing calculated statistics for given field.
    """
    air_features = []
    soil_features = []
    metadata = []

    # Get the number of measurements for the target field.
    num_measurements = field_df.shape[0]
    metadata.append(num_measurements)

    # Remove missing data from the DataFrame.
    field_df.dropna(inplace = True)

    # Retrieve basic statistics from target field.
    num_valid = field_df.shape[0]
    metadata.append(num_valid)
    per_valid = (num_valid / num_measurements) * 100
    metadata.append(per_valid)

    num_invalid = num_measurements - num_valid
    metadata.append(num_invalid)
    per_invalid = (num_invalid / num_measurements) * 100
    metadata.append(per_invalid)

    # Apply wavelet transform to air temperature data.
    air_wavelet = pywt.wavedec(
        field_df["Temperature [C]"].to_numpy(),
        wavelet_type,
        level = levels
    )

    # Apply wavelet transform to soil temperature data.
    soil_wavelet = pywt.wavedec(
        field_df["Soil Temperature [C]"].to_numpy(),
        wavelet_type,
        level = levels
    )

    # Get the number of coefficients obtained.
    metadata.append(len(air_wavelet))
    metadata.append(len(soil_wavelet))

    # Calculate features for each air coefficient.
    for coefficient in air_wavelet:

        median = np.nanpercentile(coefficient, 50)
        mean = np.nanmean(coefficient)
        std = np.nanstd(coefficient)
        variance = np.nanvar(coefficient)
        rms = np.nanmean(np.sqrt(coefficient**2))

        # Append calculated features to an array.
        air_features = air_features + [median, mean, std, variance, rms]

    # Calculate features for each soil coefficient.
    for coefficient in soil_wavelet:

        median = np.nanpercentile(coefficient, 50)
        mean = np.nanmean(coefficient)
        std = np.nanstd(coefficient)
        variance = np.nanvar(coefficient)
        rms = np.nanmean(np.sqrt(coefficient**2))

        # Append calculated features to an array.
        soil_features = soil_features + [median, mean, std, variance, rms]

    metadata.append(len(air_features))
    metadata.append(len(soil_features))

    return air_wavelet, soil_wavelet, air_features, soil_features, metadata


def wavelet_snippets(wavelets, field, plot_color, metric, snippet_path):
    """
    Creates a composite plot of a given array of wavelets.

    Parameters
    ----------
    wavelets : np.ndarray
        Array containing wavelet coefficients to be plotted.
    field : str
        Name of the target field.
    plot_color : str
        Color to be used for plotting, in HEX format.
    metric : str
        Whether to plot air or soil Temperature data.
    snippet_path : str
        Path to save the composite plot.
    """
    # Get the number of wavelets to plot.
    num_wavelets = len(wavelets)
    plot_rows = ceil(num_wavelets / 2)

    figure = plt.figure(figsize = (20, 20))

    # Create subplots for each wavelet.
    for i in range(0, num_wavelets):
        wavelet_plot = figure.add_subplot(plot_rows, 2, i + 1)

        wavelet_plot.set_facecolor("#F5F5F5")
        wavelet_plot.grid(True, linestyle = ':')

        wavelet_plot.yaxis.set_minor_locator(ticker.AutoMinorLocator(5))
        wavelet_plot.xaxis.set_minor_locator(ticker.AutoMinorLocator(5))

        wavelet_plot.plot(wavelets[i], color = plot_color)

    # Save plot to target path.
    plot_path = snippet_path + '/' + field + '_' + metric + \
        "_Temperature_Wavelet_Snippets.png"
    figure.savefig(plot_path, facecolor = "w", dpi = 600)
    plt.close()


def field_summary(field_metadata, field, snippet_path):
    """
    Generates a markdown summary of the wavelet transform data of a given field.

    Parameters
    ----------
    field_metadata : np.ndarray
        Array containing calculated statistics of the given field.
    field : str
        Name of the given field.
    snippet_path : str
        Path to save the generated summary file.
    """
    summary_path = snippet_path + '/' + "README.md"
    summary = open(summary_path, "w")

    summary.write("# " + field + " - Wavelet Transform Summary")
    summary.write("\n\n")

    summary.write("***")
    summary.write("\n\n")
    summary.write("### Overview")
    summary.write("\n\n")

    summary.write("- Number of Measurements [#] = "
                  + str(field_metadata[0])
                  + '\n')
    summary.write("- Number of Valid Measurements [#] = "
                  + str(field_metadata[1])
                  + " ({:.2f}%)".format(field_metadata[2])
                  + '\n')
    summary.write("- Number of Invalid Measurements [#] = "
                  + str(field_metadata[3])
                  + " ({:.2f}%)".format(field_metadata[4])
                  + '\n')

    summary.write("- Wavelet Coefficients for Air Temperature [#] = "
                  + str(field_metadata[5])
                  + '\n')
    summary.write("- Wavelet Coefficients for Soil Temperature [#] = "
                  + str(field_metadata[6])
                  + '\n')

    summary.write("- Calculated Features for Air Temperature [#] = "
                  + str(field_metadata[7])
                  + '\n')
    summary.write("- Calculated Features for Soil Temperature [#] = "
                  + str(field_metadata[8])
                  + '\n')

    summary.write("\n")

    summary.write("***")
    summary.write("\n\n")
    summary.write("### Air Temperature Wavelet Snippets")
    summary.write("\n\n")

    air_plot = field + "_Air_Temperature_Wavelet_Snippets.png"
    summary.write("![](" + air_plot + ')')
    summary.write("\n\n")

    summary.write("***")
    summary.write("\n\n")
    summary.write("### Soil Temperature Wavelet Snippets")
    summary.write("\n\n")

    soil_plot = field + "_Soil_Temperature_Wavelet_Snippets.png"
    summary.write("![](" + soil_plot + ')')
    summary.write("\n\n")

    summary.close()


def main():
    global status, current, total

    parser = argparse.ArgumentParser(description = __doc__)
    parser.add_argument(
        "-i", "--input_path",
        type = str,
        help = "Path to directory containing .csv files of Weather Data. The "
               "script expects one file per field. Any non-csv files will be "
               "ignored.",
        required = True)
    parser.add_argument(
        "-f", "--feature_path",
        type = str,
        help = "Path to directory that will contain generated wavelet "
               "features.",
        required = True)
    parser.add_argument(
        "-w", "--wavelet",
        type = str,
        help = "Wavelet to use.",
        required = True)
    parser.add_argument(
        "-l", "--level",
        type = str,
        help = "Number of wavelet coefficients to be generated. If <max> is "
               "given, the maximum possible coefficients will be generated.",
        required = True)
    parser.add_argument(
        "-s", "--snippet_path",
        type = str,
        help = "Path to directory that will contain wavelet snippet plots.",
        required = True)

    args = parser.parse_args()

    print("\n")

    files = os.listdir(args.input_path)

    total = len(files)
    tick_msg("Found data for " + str(total) + " fields.\n")

    status = True
    loading = Thread(target = anim_process,
                     args = ("Performing Wavelet Transform on field "
                             "temperature data.",))
    loading.start()

    for file in files:

        if file.split('.')[1] == "csv":

            levels = ""
            if args.level == "max":
                levels = None
            else:
                levels = int(args.level)

            field_name = file.split('.')[0]

            # Open data for current field.
            file_path = args.input_path + '/' + file
            field_df = pd.read_csv(file_path)
            field_df = field_df[["Temperature [C]", "Soil Temperature [C]"]]

            # Directory to store features for the current field.
            features_path = args.feature_path + '/' + field_name
            os.mkdir(features_path)

            # Directory to store wavelet snippets for the current field.
            snippet_path = args.snippet_path + '/' + field_name
            os.mkdir(snippet_path)

            air_wavelet, soil_wavelet, air_features, soil_features, metadata = \
                wavelet_transform(field_df, args.wavelet, levels)

            # Save calculated features.
            air_file = features_path + '/' + field_name + \
                "_Air_Temperature_Features.csv"
            np.savetxt(air_file, air_features, delimiter = ',')
            soil_file = features_path + '/' + field_name + \
                "_Soil_Temperature_Features.csv"
            np.savetxt(soil_file, soil_features, delimiter = ',')

            # Create wavelet snippets.
            wavelet_snippets(air_wavelet, field_name, "#0091FF",
                             "Air", snippet_path)

            wavelet_snippets(soil_wavelet, field_name, "red",
                             "Soil", snippet_path)

            # Generate summary.
            field_summary(metadata, field_name, snippet_path)

        current += 1

    status = False
    loading.join()
    tick_msg("Successfully performed Wavelet Transform on field and "
             "temperature data.\n")

    tick_msg("Done!")


if __name__ == "__main__":
    main()
